
Symbol is Typename
Symbol is Typename
Symbol is VAR
function
function
function
function
function
Symbol is VAR
Symbol is Typename
function
Symbol is VAR
Symbol is VAR
Symbol is VAR
function
Symbol is VAR
function
function
function
Symbol is VAR
Symbol is VAR
function
(declsfun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-type (id string) (type-array (type-int)))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-type (id any) (type-struct (typed-id (id any) (type-bool))))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-var (id buffer) (type-int) (fun-call (id getchar) (exps)))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-fun (id chr) (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int))))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-fun (id ord) (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int)))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-fun (id isdigit) (type-fun (params (typed-id (id s) (type-int))) (type-bool))
      (decls)
      (stmts
         (return (& (>= (id buffer) (fun-call (id ord) (exps (str "0")))) (<= (id buffer) (fun-call (id ord) (exps (str "9"))))))))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-fun (id skipto) (type-fun (params) (type-void))
      (decls)
      (stmts
         (while (| (== (id buffer) (fun-call (id ord) (exps (str " ")))) (== (id buffer) (num 10)))
            (stmts
               (assign (id buffer) (fun-call (id getchar) (exps)))))))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-fun (id readint) (type-fun (params (typed-id (id any) (type-id any))) (type-int))
      (declsfun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

         (decl-var (id i) (type-int) (num 0)))
      (stmts
         (exp-stmt (fun-call (id skipto) (exps)))
         (assign (field-lkup (id any) (id any)) (fun-call (id isdigit) (exps (id buffer))))
         (while (fun-call (id isdigit) (exps (id buffer)))
            (stmts
               (assign (id i) (+ (* (id i) (num 10)) (- (id buffer) (fun-call (id ord) (exps (str "0"))))))
               (assign (id buffer) (fun-call (id getchar) (exps)))))
         (return (id i))))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-type (id list) (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list))))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-fun (id readlist) (type-fun (params) (type-id list))
      (declsfun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

         (decl-var (id any) (type-id any))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

         (decl-var (id i) (type-int) (fun-call (id readint) (exps (id any))))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

         (decl-var (id newlist) (type-id list)))
      (stmts
         (if (field-lkup (id any) (id any))
            (stmts
               (assign (field-lkup (id newlist) (id first)) (id i))
               (assign (field-lkup (id newlist) (id rest)) (fun-call (id readlist) (exps)))
               (return (id newlist)))
            (stmts
               (return (nil))))))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-fun (id merge) (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
      (declsfun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

         (decl-var (id newlist) (type-id list)))
      (stmts
         (if (== (id a) (nil))
            (stmts
               (return (id b)))
            (stmts
               (if (== (id b) (nil))
                  (stmts
                     (return (id a)))
                  (stmts
                     (if (< (field-lkup (id a) (id first)) (field-lkup (id b) (id first)))
                        (stmts
                           (assign (field-lkup (id newlist) (id first)) (field-lkup (id a) (id first)))
                           (assign (field-lkup (id newlist) (id rest)) (fun-call (id merge) (exps (field-lkup (id a) (id rest)) (id b))))
                           (return (id newlist)))
                        (stmts
                           (assign (field-lkup (id newlist) (id first)) (field-lkup (id b) (id first)))
                           (assign (field-lkup (id newlist) (id rest)) (fun-call (id merge) (exps (id a) (field-lkup (id b) (id rest)))))
                           (return (id newlist))))))))))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-fun (id f) (type-fun (params (typed-id (id i) (type-int))) (type-void))
      (decls)
      (stmts
         (if (> (id i) (num 0))
            (stmts
               (exp-stmt (fun-call (id f) (exps (/ (id i) (num 10)))))
               (exp-stmt (fun-call (id print) (exps (fun-call (id chr) (exps (+ (- (id i) (* (/ (id i) (num 10)) (num 10))) (fun-call (id ord) (exps (str "0"))))))))))
            (stmts))))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-fun (id printint) (type-fun (params (typed-id (id i) (type-int))) (type-void))
      (decls)
      (stmts
         (if (< (id i) (num 0))
            (stmts
               (exp-stmt (fun-call (id print) (exps (str "-"))))
               (exp-stmt (fun-call (id f) (exps (-  (id i))))))
            (stmts
               (if (> (id i) (num 0))
                  (stmts
                     (exp-stmt (fun-call (id f) (exps (id i)))))
                  (stmts
                     (exp-stmt (fun-call (id print) (exps (str "0"))))))))))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-fun (id printlist) (type-fun (params (typed-id (id l) (type-id list))) (type-void))
      (declsfun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

         (decl-var (id list1) (type-id list))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

         (decl-var (id list2) (type-id list)))
      (stmts
         (if (== (id l) (nil))
            (stmts
               (exp-stmt (fun-call (id print) (exps (array-lit (exps (num 10)))))))
            (stmts
               (exp-stmt (fun-call (id printint) (exps (field-lkup (id l) (id first)))))
               (exp-stmt (fun-call (id print) (exps (str " "))))
               (exp-stmt (fun-call (id printlist) (exps (field-lkup (id l) (id rest)))))))
         (assign (id list1) (fun-call (id readlist) (exps)))
         (assign (id buffer) (fun-call (id getchar) (exps)))
         (assign (id list2) (fun-call (id readlist) (exps)))
         (exp-stmt (fun-call (id printlist) (exps (fun-call (id merge) (exps (id list1) (id list2))))))))fun(chr) |-> (type-fun (params (typed-id (id c) (type-int))) (type-array (type-int)))
fun(ord) |-> (type-fun (params (typed-id (id c) (type-array (type-int)))) (type-int))
fun(isdigit) |-> (type-fun (params (typed-id (id s) (type-int))) (type-bool))
fun(skipto) |-> (type-fun (params) (type-void))
fun(readint) |-> (type-fun (params (typed-id (id any) (type-id any))) (type-int))
fun(readlist) |-> (type-fun (params) (type-id list))
fun(merge) |-> (type-fun (params (typed-id (id a) (type-id list)) (typed-id (id b) (type-id list))) (type-id list))
fun(f) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printint) |-> (type-fun (params (typed-id (id i) (type-int))) (type-void))
fun(printlist) |-> (type-fun (params (typed-id (id l) (type-id list))) (type-void))
fun(main) |-> (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))
type(list) |-> (type-struct (typed-id (id first) (type-int)) (typed-id (id rest) (type-id list)))
type(string) |-> (type-array (type-int))
type(any) |-> (type-struct (typed-id (id any) (type-bool)))
var(buffer) |-> (type-int)

   (decl-fun (id main) (type-fun (params (typed-id (id argv) (type-array (type-array (type-int))))) (type-int))))